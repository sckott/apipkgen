[{"path":"http://sckott.github.io/apipkgen/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (https://contributor-covenant.org), version 1.0.0, available https://contributor-covenant.org/version/1/0/0/","code":""},{"path":"http://sckott.github.io/apipkgen/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Scott Chamberlain. Author, maintainer.","code":""},{"path":"http://sckott.github.io/apipkgen/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chamberlain S (2024). apipkgen: Package Generator HTTP API Wrapper Packages. R package version 0.0.6.9100, http://sckott.github.io/apipkgen/, https://github.com/sckott/apipkgen.","code":"@Manual{,   title = {apipkgen: Package Generator for HTTP API Wrapper Packages},   author = {Scott Chamberlain},   year = {2024},   note = {R package version 0.0.6.9100, http://sckott.github.io/apipkgen/},   url = {https://github.com/sckott/apipkgen}, }"},{"path":"http://sckott.github.io/apipkgen/index.html","id":"apipkgen","dir":"","previous_headings":"","what":"Package Generator for HTTP API Wrapper Packages","title":"Package Generator for HTTP API Wrapper Packages","text":"Generate HTTP API wrapper package yaml template API internals little hacky, point dependencies possible, just depending yaml right now.","code":""},{"path":"http://sckott.github.io/apipkgen/index.html","id":"steps","dir":"","previous_headings":"","what":"Steps","title":"Package Generator for HTTP API Wrapper Packages","text":"Specify API YAML file Run apipkgen::generate_pkg() generate package Write wrapper functions new package Done!","code":""},{"path":"http://sckott.github.io/apipkgen/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Package Generator for HTTP API Wrapper Packages","text":"Package generation yaml template gives back raw text right now, add toggles add JSON vs. XML parsers specify query parameters, including options, whether required , expected class previous, paths base URL","code":""},{"path":"http://sckott.github.io/apipkgen/index.html","id":"example-spec","dir":"","previous_headings":"","what":"Example spec","title":"Package Generator for HTTP API Wrapper Packages","text":"nytimes https://github.com/NYTimes/public_api_specs (requires auth) stripe https://github.com/stripe/openapi (requires auth) Canada’s BC government https://github.com/bcgov/api-specs (auth required)","code":""},{"path":"http://sckott.github.io/apipkgen/index.html","id":"install","dir":"","previous_headings":"","what":"Install","title":"Package Generator for HTTP API Wrapper Packages","text":"","code":"# install.packages(\"pak\") pak::pak(\"sckott/apipkgen\") library(\"apipkgen\")"},{"path":[]},{"path":"http://sckott.github.io/apipkgen/index.html","id":"generate-a-package","dir":"","previous_headings":"Simple yml template (not fitting swagger/etc.)","what":"generate a package","title":"Package Generator for HTTP API Wrapper Packages","text":"use function generate_pkg()","code":"template <- system.file('examples', 'template_crossref.yml',     package = \"apipkgen\") path <- file.path(tempdir(), \"crpkg\") generate_pkg(path, template_path = template)"},{"path":"http://sckott.github.io/apipkgen/index.html","id":"your-package-needs-functions","dir":"","previous_headings":"Simple yml template (not fitting swagger/etc.)","what":"your package needs functions","title":"Package Generator for HTTP API Wrapper Packages","text":"package created doesn’t exported functions, just internal functions build user facing functions. Let’s write user facing functions. Crossref API template specified works route parameters query rows. let’s work . addition, ’s good idea always allow users pass curl options. Beginners can ignore , power curl users want/play curl options. function builder builds ... parameter user facing function add well users access.","code":"crossref_works <- function(query = NULL, rows = NULL, ...) {   crpkg::works(query = query, rows = rows, ...) }"},{"path":"http://sckott.github.io/apipkgen/index.html","id":"install-package","dir":"","previous_headings":"Simple yml template (not fitting swagger/etc.)","what":"Install package","title":"Package Generator for HTTP API Wrapper Packages","text":"Go new directory, R/RStudio run devtools::document() devtools::install() (equivalent).","code":""},{"path":"http://sckott.github.io/apipkgen/index.html","id":"use-package","dir":"","previous_headings":"Simple yml template (not fitting swagger/etc.)","what":"Use package","title":"Package Generator for HTTP API Wrapper Packages","text":"Call function. package builder gives back plain text, parse .","code":"res <- crossref_works(query = \"science\") jsonlite::fromJSON(res) #> $status #> [1] \"ok\" #> #> $`message-type` #> [1] \"work-list\" #> #> $`message-version` #> [1] \"1.0.0\" #> #> $message #> $message$query #> $message$query$`search-terms` #> [1] \"science\" #> #> $message$query$`start-index` #> [1] 0 #> #> #> $message$`items-per-page` #> [1] 20 #> #> $message$items #>     indexed.date-parts    indexed.date-time indexed.timestamp reference-count #> 1        2015, 12, 27 2015-12-27T23:37:50Z      1.451259e+12               0 #> 2        2015, 12, 24 2015-12-24T22:03:23Z      1.450995e+12               0 #> 3        2015, 12, 25 2015-12-25T19:17:30Z      1.451071e+12               0 #> 4        2015, 12, 27 2015-12-27T19:35:51Z      1.451245e+12               0"},{"path":[]},{"path":"http://sckott.github.io/apipkgen/index.html","id":"example-1","dir":"","previous_headings":"Swagger/OpenAPI","what":"Example 1","title":"Package Generator for HTTP API Wrapper Packages","text":"Get spec, case Province British Columbia https://github.com/bcgov/api-specs Generate package, install Restart R … Get man page function Run functions cleanup","code":"bc_spec <-    \"https://raw.githubusercontent.com/bcgov/api-specs/master/bcgnws/bcgnws.json\" bc_spec_path <- \"bcgov_bcgnws.yaml\" download.file(bc_spec, bc_spec_path) generate_pkg(   pkg_path = \"bcgov/\",    template_path = bc_spec_path ) devtools::document(\"bcgov\") devtools::install_local(\"bcgov\", force = TRUE, quiet = TRUE) ?bcgov::nameAuthorities bcgov::nameAuthorities() res <- bcgov::names_search(name = \"Victoria\") tibble::as_tibble(jsonlite::fromJSON(res)$features) unlink(\"bcgov\", TRUE, TRUE) unlink(bc_spec_path, TRUE) remove.packages(\"bcgov\")"},{"path":"http://sckott.github.io/apipkgen/index.html","id":"example-2","dir":"","previous_headings":"Swagger/OpenAPI","what":"Example 2","title":"Package Generator for HTTP API Wrapper Packages","text":"example Directory Open Access Journals Generate package, install Run function cleanup","code":"doaj_spec <- \"https://doaj.org/api/v1/swagger.json\" doaj_spec_path <- \"doaj.json\" download.file(doaj_spec, doaj_spec_path) generate_pkg(   pkg_path = \"doaj/\",    template_path = doaj_spec_path,   base_url = \"https://doaj.org\" ) devtools::document(\"doaj\") devtools::install_local(\"doaj\", force = TRUE, quiet = TRUE) doaj::api_v1_search_journals_search_query(\"cellular\") unlink(\"doaj\", TRUE, TRUE) unlink(doaj_spec_path, TRUE) remove.packages(\"doaj\")"},{"path":"http://sckott.github.io/apipkgen/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Package Generator for HTTP API Wrapper Packages","text":"Please note project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":"http://sckott.github.io/apipkgen/reference/apipkgen-package.html","id":null,"dir":"Reference","previous_headings":"","what":"apipkgen: Package Generator for HTTP API Wrapper Packages — apipkgen-package","title":"apipkgen: Package Generator for HTTP API Wrapper Packages — apipkgen-package","text":"Package Generator HTTP API Wrapper Packages.","code":""},{"path":[]},{"path":"http://sckott.github.io/apipkgen/reference/apipkgen-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"apipkgen: Package Generator for HTTP API Wrapper Packages — apipkgen-package","text":"Maintainer: Scott Chamberlain myrmecocystus@gmail.com","code":""},{"path":"http://sckott.github.io/apipkgen/reference/generate_pkg.html","id":null,"dir":"Reference","previous_headings":"","what":"HTTP API package generator — generate_pkg","title":"HTTP API package generator — generate_pkg","text":"HTTP API package generator","code":""},{"path":"http://sckott.github.io/apipkgen/reference/generate_pkg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"HTTP API package generator — generate_pkg","text":"","code":"generate_pkg(   pkg_path,   template_path = NULL,   http_lib = \"crul\",   base_url = NULL )"},{"path":"http://sckott.github.io/apipkgen/reference/generate_pkg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"HTTP API package generator — generate_pkg","text":"pkg_path (character) Path new package, last part package name template_path (character) path yaml template file. default, use demo template yaml file http_lib (character) one crul (default) httr base_url (character) Base URL. NULL, defaults baseUrl formed schemes, host, basePath specified template file.","code":""},{"path":"http://sckott.github.io/apipkgen/reference/generate_pkg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"HTTP API package generator — generate_pkg","text":"","code":"if (FALSE) { # \\dontrun{ generate_pkg(pkg_path = \"mypkg\")  # from a Swagger spec url <- \"https://raw.githubusercontent.com/ropenscilabs/apispecs/master/swagger/crossref.yml\" # x <- paste0(readLines(url), collapse = \"\\n\") # yaml::yaml.load(string = x) download.file(url, \"crossref.yml\") generate_pkg(pkg_path = \"foobar\", template_path = \"crossref.yml\") } # }"},{"path":"http://sckott.github.io/apipkgen/reference/template-format.html","id":null,"dir":"Reference","previous_headings":"","what":"API template format — template-format","title":"API template format — template-format","text":"API template format","code":""},{"path":"http://sckott.github.io/apipkgen/reference/template-format.html","id":"baseurl","dir":"Reference","previous_headings":"","what":"baseurl","title":"API template format — template-format","text":"required: TRUE type: character string description: base url base url, routes added (e.g., base url 'http://stuff.com', route 'things' make url 'http://stuff.com/things')","code":""},{"path":"http://sckott.github.io/apipkgen/reference/template-format.html","id":"data","dir":"Reference","previous_headings":"","what":"data","title":"API template format — template-format","text":"required: TRUE type: character string description: one json xml","code":""},{"path":"http://sckott.github.io/apipkgen/reference/template-format.html","id":"routes","dir":"Reference","previous_headings":"","what":"routes","title":"API template format — template-format","text":"required: TRUE type: array description: number routes, see route description","code":""},{"path":"http://sckott.github.io/apipkgen/reference/template-format.html","id":"a-single-route","dir":"Reference","previous_headings":"","what":"a single route","title":"API template format — template-format","text":"required: TRUE type: array description: Follows following pattern: name: path: id: options: NULL class: character required: FALSE params: query: options: NULL class: character required: FALSE","code":""},{"path":"http://sckott.github.io/apipkgen/reference/write_constants.html","id":null,"dir":"Reference","previous_headings":"","what":"Constants to zzz — write_constants","title":"Constants to zzz — write_constants","text":"Constants zzz","code":""},{"path":"http://sckott.github.io/apipkgen/reference/write_constants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constants to zzz — write_constants","text":"","code":"write_constants(template_path = NULL, outfile = \"zzz.R\", base_url = NULL)"},{"path":"http://sckott.github.io/apipkgen/reference/write_constants.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constants to zzz — write_constants","text":"template_path (character) path yaml template file. default, use demo template yaml file outfile (character) Path write functions base_url (character) optional. given, use base url spec. can give override anything spec","code":""},{"path":"http://sckott.github.io/apipkgen/reference/write_constants.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constants to zzz — write_constants","text":"returns silently, writing things zzz.R","code":""},{"path":"http://sckott.github.io/apipkgen/reference/write_fxns.html","id":null,"dir":"Reference","previous_headings":"","what":"Function generator — write_fxns","title":"Function generator — write_fxns","text":"Function generator","code":""},{"path":"http://sckott.github.io/apipkgen/reference/write_fxns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function generator — write_fxns","text":"","code":"write_fxns(template_path = NULL, outfile = \"http-fxns.R\")"},{"path":"http://sckott.github.io/apipkgen/reference/write_fxns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function generator — write_fxns","text":"template_path (character) path yaml template file. default, use demo template yaml file outfile (character) Path write functions ","code":""},{"path":"http://sckott.github.io/apipkgen/reference/write_fxns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function generator — write_fxns","text":"returns silently, writing functions single file, given outfile","code":""},{"path":"http://sckott.github.io/apipkgen/reference/write_fxns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function generator — write_fxns","text":"","code":"if (FALSE) { # \\dontrun{ write_fxns() } # }"},{"path":"http://sckott.github.io/apipkgen/reference/write_helpers.html","id":null,"dir":"Reference","previous_headings":"","what":"Write http helpers — write_helpers","title":"Write http helpers — write_helpers","text":"Write http helpers","code":""},{"path":"http://sckott.github.io/apipkgen/reference/write_helpers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write http helpers — write_helpers","text":"","code":"write_helpers(outfile = \"http-helpers.R\", http_lib = \"crul\")"},{"path":"http://sckott.github.io/apipkgen/reference/write_helpers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write http helpers — write_helpers","text":"outfile (character) Path write http helpers file http_lib (character) one crul (default) httr","code":""},{"path":"http://sckott.github.io/apipkgen/reference/write_helpers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write http helpers — write_helpers","text":"","code":"if (FALSE) { # \\dontrun{ write_helpers() } # }"}]
